% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/m2-validateMethod-method.R
\name{validateMethodM2}
\alias{validateMethodM2}
\title{Validate that the input method conform to required standards of the Task class}
\usage{
validateMethodM2(method = NULL)
}
\arguments{
\item{method}{A user-defined \code{function}. This \code{function} must contain input parameters \code{x} (a numerical matrix with \code{n} columns and \code{m} rows), \code{y} (a two-level factor or character vector of length \code{n}), and [optionally] \code{data} (a \code{data.frame} with \code{n} rows, each corresponding to a respective column in \code{x}). The user can provide additional parameters to the \code{function} but must specify default values in the \code{function}'s definition. \code{method} must return a numerical matrix with the same number of columns (\code{ncol}) and column names (\code{colnames}) as \code{x} and [optionally] a rank vector ranking the rows of \code{x} in terms of their importance (see example below).}
}
\value{
Function will execute silently if no errors are detected in \code{libraries}
}
\description{
More detailed explaination here
}
\examples{
set.seed(1234)
x <- matrix(rnorm(100),nrow=10)
colnames(x) <- paste0("sample_",1:10)
row.names(x) <- paste0("gene_",1:10)
y <- sample(c("Case","Control"),10,replace=T)

method <- function(x,y){
 x[,y=="Case"] <- x[,y=="Case"] + 1
 x[,y=="Control"] <- x[,y=="Control"] - 1
 return(x)
}
validateMethodM2(method)

dat <- data.frame(
 ID = paste("Sample",1:10,sep="_"),
 CovarA = sample(c(0,1),10,replace=T),
 CovarB = sample(c(0,1),10,replace=T)
)  

method <- function(x,y,dat){
 x[,(y=="Case" & dat$CovarA==0)] <- x[,(y=="Case" & dat$CovarA==0)] + 1
 x[,(y=="Control" & dat$CovarA==1)] <- x[,(y=="Control" & dat$CovarA==1)] + 1
 return(x)
}
validateMethodM2(method)

method <- function(x,y,dat){
 x[,(y=="Case" & dat$CovarA==0)] <- x[,(y=="Case" & dat$CovarA==0)] + 1
 x[,(y=="Control" & dat$CovarA==1)] <- x[,(y=="Control" & dat$CovarA==1)] + 1
 ranks <- 1:10
 return(list(x=x,rank=ranks))
}
validateMethodM2(method)
}

